name: Security CI

on:
  push:
    branches:
      - develop

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 2. Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 3. Configurar Cache do Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 4. Executar Análises de Segurança e Gerar Relatórios
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn -B verify \
            org.owasp:dependency-check-maven:aggregate \
            -DskipTests

      - name: 5. Enviar Relatório do Dependency-Check para o DefectDojo
        if: success()
        run: |
          curl -X POST \
            --insecure \
            --url "${{ secrets.DEFECT_DOJO_URL }}/api/v2/import-scan/" \
            --header "Authorization: Token ${{ secrets.DEFECT_DOJO_API_KEY }}" \
            --form "scan_type=Dependency Check Scan" \
            --form "product_name=colmeia-jogos-api" \
            --form "engagement_name=CI Build Dependency-Check ${{ github.run_id }}" \
            --form "file=@${{ github.workspace }}/target/dependency-check-report.xml" \
            --form "auto_create_context=true"

      - name: 6. Enviar Relatório do SpotBugs para o DefectDojo
        if: success()
        run: |
          curl -X POST \
            --insecure \
            --url "${{ secrets.DEFECT_DOJO_URL }}/api/v2/import-scan/" \
            --header "Authorization: Token ${{ secrets.DEFECT_DOJO_API_KEY }}" \
            --form "scan_type=SpotBugs Scan" \
            --form "product_name=colmeia-jogos-api" \
            --form "engagement_name=CI Build SpotBugs ${{ github.run_id }}" \
            --form "file=@${{ github.workspace }}/target/spotbugsXml.xml" \
            --form "auto_create_context=true"

      - name: 7. Iniciar a API para o Teste Dinâmico (DAST)
        run: mvn spring-boot:run &

      - name: 8. Aguardar a API Iniciar
        run: sleep 45

      - name: 9. Executar o Scan DAST com OWASP ZAP
        uses: zaproxy/action-api-scan@v0.5.0
        with:
          target: 'http://localhost:8080/v3/api-docs'
          format: 'openapi'
          report_formats: 'html,xml'

      - name: 10. Enviar Relatório do ZAP para o DefectDojo
        if: success()
        run: |
          curl -X POST \
            --insecure \
            --url "${{ secrets.DEFECT_DOJO_URL }}/api/v2/import-scan/" \
            --header "Authorization: Token ${{ secrets.DEFECT_DOJO_API_KEY }}" \
            --form "scan_type=ZAP Scan" \
            --form "product_name=colmeia-jogos-api" \
            --form "engagement_name=CI Build ZAP Scan ${{ github.run_id }}" \
            --form "file=@${{ github.workspace }}/zap_report.xml"
            --form "auto_create_context=true"

      - name: 11. Carregar Artefatos de Relatório
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            target/dependency-check-report.xml
            target/spotbugsXml.xml
            zap_report.xml
            zap_report.html
