name: colmeia-prod

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build e Push da Imagem Docker
    runs-on: ubuntu-latest

    steps:
      # 1. Clona o repositório
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven # Habilita o cache para as dependências do Maven

      - name: Build com Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 5. Faz login no Docker Hub
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v3
        with:
          push: true # Habilita o push para o registry
          tags: | # Adiciona as tags 'latest' e o SHA do commit
            ${{ secrets.REGISTRY_IMAGE }}:latest
            ${{ secrets.REGISTRY_IMAGE }}:${{ github.sha }}
          platforms: linux/amd64,linux/arm64 # Define as plataformas de destino
          cache-from: type=gha # Usa o cache do GitHub Actions para acelerar o build
          cache-to: type=gha,mode=max

  scanner-imagem:
    name: Analise de segurança da imagem gerada no step anterior
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'docker.io/arthurlevi/colmeia-jogos:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 5. Enviar Relatório do Trivy para o DefectDojo
        if: success()
        run: |
          curl -X POST \
            --insecure \
            --url "${{ secrets.DEFECT_DOJO_URL }}/api/v2/import-scan/" \
            --header "Authorization: Token ${{ secrets.DEFECT_DOJO_API_KEY }}" \
            --form "scan_type=Trivy Scan" \
            --form "product_name=colmeia-jogos-api" \
            --form "engagement_name=CI Build ${{ github.run_id }}" \
            --form "file=@${{ github.workspace }}/trivy-results.json" \
            --form "auto_create_context=true"

  # deploy:
  #   name: Deploy no Docker Swarm
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #     - scanner-imagem

  #   steps:
  #     - name: Checkout do repositório
  #       uses: actions/checkout@v4

  #     - name: Configurar Chave SSH
  #       run: |
  #         mkdir -p ~/.ssh
  #         chmod 700 ~/.ssh
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H ${{ vars.BASTION_HOST }} >> ~/.ssh/known_hosts

  #     # 3. Executa o deploy no Swarm via SSH
  #     - name: Deploy no Swarm
  #       run: |
  #         ssh admin@${{ vars.BASTION_HOST }} <<EOF
  #           cd projetos-colmeia/jogos/back
  #           sed -i "s|${{ secrets.REGISTRY_IMAGE }}:.*|${{ secrets.REGISTRY_IMAGE }}:${{ github.sha }}|g" docker-compose.yml          
  #           docker pull ${{ secrets.REGISTRY_IMAGE }}:${{ github.sha }}          
  #           docker stack deploy --with-registry-auth -c docker-compose.yml jogos-back
  #           docker service ls
  #         EOF
